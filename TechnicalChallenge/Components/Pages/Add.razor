@*

    The page to add release note records to the database.
    Version 3.30.25

*@

<!-- Link to the page -->
@page "/add"
@rendermode InteractiveServer
@layout EmptyLayout

@using DataLibrary
@using DataLibrary.Models
@using Microsoft.Extensions.Configuration
@using BlazorBootstrap.Components
@using System.ComponentModel.DataAnnotations

<!-- Injections -->
@inject IUserData _data
@inject IReleaseNotesData _notesData
@inject IConfiguration _config
@inject NavigationManager nav

<PageTitle>Add Records</PageTitle>
<Modal IsServiceModal="true" />
<body>
    <!--This page is not using the MainLayout, so we have to add the sign-out/dashboard navigation bar to to the top of the page-->
    <div class="top-row px-4">
        <a><SignOutButton /></a>
    </div>
    <h3>Release Notes Management Tool</h3>
    <p>Create a New Release Note Record</p>
    <p>Please enter the Release Note details using the form below:</p>
    <div class="editform">
        <!--Form to add a new release note, it's an EditForm with EditContext using OnValidSubmit-->
        <!--This means it checks if the form is valid before we submit it, which prevents users from populating the database with invalid entries-->
        <!--In this case, we are checking to see if the input text field for Note_Content is null-->
        <EditForm EditContext="@editContext" OnValidSubmit="ConfirmAction" >
            <DataAnnotationsValidator />
            <div class="application-selection">
                <!--A drop-down menu to select the Application_Name-->
                <label class="select-input-label">Application: <span class="text-danger">*</span></label>
                <select class="select-element" @bind="ReleaseNotes.Application_Name">
                    <option value="" disabled selected>Select an Application...</option>
                    <option value="Invoice Management Tool">Invoice Management Tool</option>
                    <option value="Parts Management Tool">Parts Management Tool</option>
                </select>
            </div>

            <div class="form-group row mb-3">
                <label class="text-input-label">Release Note Text: <span class="text-danger">*</span></label>
                <div class="col-md-10">
                    <!--The text input field for Note_Content-->
                    <TextAreaInput @bind-Value="@ReleaseNotes.Note_Content" Rows="3" Placeholder="Enter Release Note" />
                    <ValidationMessage For="@(() => ReleaseNotes.Note_Content)" />
                </div>
            </div>
        
            <div class="col-md-12 text-right">
                <!--The button to save the record-->
                <input type="submit" value="Save Record" class="btn btn-primary" />
                <!--A button that clears all input from the form, i.e. resets it-->
                <button class="btn btn-secondary" @onclick="ClearForm">Clear Form</button>
            </div>
    
   
        </EditForm>
    </div>

</body>

<!--The template for the modal to confirm the save-->
<Modal @ref="confirmActionModal" title="Confirm Save" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        Are you sure you wish to save this record?
    </BodyTemplate>
    <FooterTemplate>
        <!--Cancel button to go back to the release note edit form-->
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cancel</Button>
        <!--button to confirm and go through with inserting the new release note record into the table-->
        <Button Color="ButtonColor.Primary" @onclick="NoteAdded">Confirm</Button>
    </FooterTemplate>
</Modal>


@code {
    //inject the necessary service to be able to build the modal
    [Inject] ModalService ModalService { get; set; } = default!;
    //declare the ReleaseNotesModel that will be used to store the user input values
    private ReleaseNotesModel ReleaseNotes = new ReleaseNotesModel();
    //declare the EditContext that will be used to validate the user input
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        //initialize the EditContext with the ReleaseNotesModel so it will recognize the model's properties
        editContext = new EditContext(ReleaseNotes);
        base.OnInitialized();
    }
    private bool saved = false;
    private string userFullName = "";

    //declare the user
    private UserModel currentUser;

    protected async override Task OnInitializedAsync()
    {
        //Check if user is signed in
        currentUser = _data.GetUserSignOnInfo();
        //if no user is signed in, redirect to sign in page
        if (currentUser == null)
        {
            nav.NavigateTo("/signin");
        }
    }
    //method to add the new release note record to the database
    private async Task NoteAdded() 
    {                              
        //concatenate the user's first and last name to create the value for the Created_by field
        ReleaseNotes.Created_by = currentUser.FirstName + " " + currentUser.LastName;

        //get and store the date the form was submitted
        ReleaseNotes.Created_date = DateTime.Now;

        //sql query to insert the new note into the database
        string sql = "insert into ReleaseNotes (Notes_GUID, Application_Name, Note_Content, Created_by, Created_date) values (@Notes_GUID, @Application_Name, @Note_Content, @Created_by, @Created_date);";
        //generate a new GUID for the note id, convert it to a string to match the type in the database
        string Notes_GUID = Guid.NewGuid().ToString();
        try
        {
            //close the modal
            await OnHideModalClick();
                
            //structure the task call to insert the new note into the database, I made it vertical for readability
            await _notesData.ExecuteSql(sql, new
            {
                Notes_GUID,
                Application_Name = ReleaseNotes.Application_Name,
                Note_Content = ReleaseNotes.Note_Content,
                Created_by = ReleaseNotes.Created_by,
                Created_date = ReleaseNotes.Created_date
            }, _config.GetConnectionString("default"));
               
            //set the ReleaseNotesModel in ReleaseNotesData to the new note so we can display it on the confirmation page
            //Since we altered the model to check for valid input, there was an error trying to set the note directly
            //thus we set it by individual values
            _notesData.SetNoteByParam(Notes_GUID, ReleaseNotes.Application_Name, ReleaseNotes.Note_Content, ReleaseNotes.Created_by, ReleaseNotes.Created_date);

            //if we made it to here without an exception, the note was saved
            saved = true;

                
        }
        catch (Exception e)
        {//if there is an error, display on console whether or not the note was saved
            Console.WriteLine("Note saved: " + saved);
        }

        //if the note was successfully inserted, navigate to the confirmation page
        if (saved)
        {
            nav.NavigateTo("/confirmation");
        }

    }
   
    protected void ClearForm()
    {
        
        //clear all input from the form
        //essentially resetting the ReleaseNotesModel and EditContext
        ReleaseNotes = new ReleaseNotesModel();
        editContext = new EditContext(ReleaseNotes);
    }
    //declare the modal that will be used to confirm the save
    private Modal confirmActionModal = default!;

    //method to show the modal to confirm the save
    private async Task ConfirmAction()
    {
        //check that the form is valid before showing the modal
        if (editContext.Validate())
        {
            await confirmActionModal.ShowAsync();
        }
    }
    //user selected cancel on the modal, close it
    private async Task OnHideModalClick()
    {
        await confirmActionModal.HideAsync();  
    }

    //declare the required fields for the new release note submission 
    public class ReleaseNotesModel
    {
        [Required(ErrorMessage = "Select an application.")]
        public string? Application_Name { get; set; }
        [Required(ErrorMessage = "Enter a note.")]
        public string? Note_Content { get; set; }
        public string Created_by { get; set; }
        public DateTime Created_date { get; set; }
    }
    
}

