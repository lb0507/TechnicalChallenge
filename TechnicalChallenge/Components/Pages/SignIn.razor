@*

    The sign-in page.
    Version 3.22.25

*@


<!-- Link to the page -->
@page "/signin"
<!-- allows user to interact -->
@rendermode InteractiveServer

@using DataLibrary
@using DataLibrary.Models
@using Microsoft.Extensions.Configuration

<!-- Injections -->
@inject IUserData _data
@inject IConfiguration _config
@inject NavigationManager nav

<!-- Link to the page -->
<PageTitle>Sign In</PageTitle>
<h1>Sign In</h1>

<div class="row my-4">
    <h4>idk</h4>
    <div class="col-6">
        <EditForm Model="Usr" OnValidSubmit="LoggingIn">
            <InputText @bind-Value=Usr.email/>
            <InputText @bind-Value=Usr.userpassword />
        </EditForm>
    </div>
</div>

<button class="btn btn-primary" @onclick="LoggingIn">Sign In</button>


@code {
    /*/
    @if (users == null)
    {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var u in users)
    {
            <p>
                @u.FirstName @u.LastName @u.email @u.userpassword
            </p>
            }

    }
        */

    List<UserModel> users = new();
    private UserModel Usr = new UserModel();
    //<button class="btn btn-warning" @onclick="ClearForm">Clear Form</button>
    private async Task LoggingIn() 
    {
    try
    {
        string sql = "select email, userpassword from users where email = @email";

        UserModel credentials = await _data.LogIn<UserModel, dynamic>(sql, new { email = Usr.email }, Usr.userpassword, _config.GetConnectionString("default"));
        //var connectionString = _config.GetConnectionString("default");
        //Console.WriteLine($"insert Connection String: {connectionString}");
        Console.WriteLine(credentials);
        //errorUnable to cast object of type 'System.Collections.Generic.List`1[DataLibrary.Models.UserModel]' to type 'DataLibrary.Models.UserModel'.
        //this is returning System.Collections.Generic.List`1[TechnicalChallenge.Models.UserModel]
        if (credentials!= null)//Login successful if the query pulled any users from the database
        {
            
            Console.WriteLine("Login successful!");
            nav.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Invalid credentials.");
        }

            //await OnInitializedAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }


    protected override async Task OnInitializedAsync()
    {
        /*Usr = _data.GetUserSignOnInfo();
        if (Usr != null)
       {

            nav.NavigateTo("/");
        }
        */
        try
        { //Do we need this LoadData?

            string sql = "select * from users";
            users = await _data.LoadData<UserModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            var connectionString = _config.GetConnectionString("default");
            Console.WriteLine($"Connection String: {connectionString}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
}
