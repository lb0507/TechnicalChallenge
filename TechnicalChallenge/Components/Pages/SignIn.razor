@*

    The sign-in page.
    Version 3.22.25

*@


<!-- Link to the page -->
@page "/signin"
@layout EmptyLayout
<!--Don't display the current user or sign-out button-->

<!-- allows user to interact -->
@rendermode InteractiveServer

@using DataLibrary
@using DataLibrary.Models
@using Microsoft.Extensions.Configuration


<!-- Injections -->
@inject IUserData _data
@inject IConfiguration _config
@inject NavigationManager nav

<!-- Link to the page -->
<PageTitle>Sign In</PageTitle>
<h1>Sign In</h1>



<EditForm Model="@Usr" OnValidSubmit="LoggingIn" OnInvalidSubmit="InvalidForm">
    <InputText @bind-Value="Usr.email" placeholder="Email Address" />
    <InputText @bind-Value="Usr.userpassword" placeholder="Password" />
    <input type="submit" value="Sign In" class="btn btn-primary" />
</EditForm>


<button class="btn btn-primary" @onclick="ClearForm">Clear Form</button>


@code {

    

    
    /*/  NOTE: EDIT THIS LATER TO IMPLEMENT EDITFORM AND EDITCONTEXT
    @if (users == null)
    {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var u in users)
    {
            <p>
                @u.FirstName @u.LastName @u.email @u.userpassword
            </p>
            }

    }
        */

    List<UserModel> users = new();
    private UserModel Usr = new UserModel(); 
    private UserModel currentUser = new UserModel();
    //<button class="btn btn-warning" @onclick="ClearForm">Clear Form</button>
    private async Task LoggingIn() 
    {
    try
    {
        
        string sql = "select * from users where email = @email";

        UserModel credentials = await _data.LogIn<UserModel, dynamic>(sql, new { email = Usr.email }, Usr.userpassword, _config.GetConnectionString("default"));
        //var connectionString = _config.GetConnectionString("default");
        //Console.WriteLine($"insert Connection String: {connectionString}");
        //Console.WriteLine(credentials);
        //errorUnable to cast object of type 'System.Collections.Generic.List`1[DataLibrary.Models.UserModel]' to type 'DataLibrary.Models.UserModel'.
        //this is returning System.Collections.Generic.List`1[TechnicalChallenge.Models.UserModel]
        if (credentials!= null)//Login successful if the query pulled any users from the database
        {

            Console.WriteLine("Login successful!");
            nav.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Invalid credentials.");
            //Refresh the text fields
            ClearForm();
        }

            //await OnInitializedAsync();
    }
    catch (Exception e)
    {
        Console.WriteLine(e.Message);
    }

    }


    protected override async Task OnInitializedAsync()
    {
        
        try
        { //Do we need this LoadData? - probably not
            currentUser = _data.GetUserSignOnInfo();
            //See if user is already signed in, if so, redirect to home page
            if (currentUser != null)
            {

                nav.NavigateTo("/");
            //add a pop up or something informing the user that they are already signed in
            }
            /*
            string sql = "select * from users";
            users = await _data.LoadData<UserModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            var connectionString = _config.GetConnectionString("default");
            Console.WriteLine($"Connection String: {connectionString}");
            */
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    
    }
        //Clear the input fields
    protected void ClearForm()
    {
         Usr = new UserModel();
    }

    void InvalidForm()
    {
        Console.WriteLine("Invalid form.");
    }

    
    

}
