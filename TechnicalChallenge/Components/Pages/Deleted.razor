@page "/deletedrecords"
@rendermode InteractiveServer
@using DataLibrary
@using DataLibrary.Models
@using Microsoft.Extensions.Configuration
@using BlazorBootstrap.Components



<!-- Injections -->
@inject IUserData _data
@inject IReleaseNotesData _notesData
@inject IConfiguration _config
@inject NavigationManager nav



<PageTitle>View Records</PageTitle>
<Modal IsServiceModal="true" />
<div class="container">
    <h3>Release Notes Management Tool</h3>
    <p>Deleted Release Note Records:</p>
    <p>@numNotes Record(s) Found</p>
</div>
<div class="grid-content">
    <!-- Build the table for displaying release note data as a grid-->
    <Grid @ref="grid"
          TItem="DeletedNotesModel"
          AllowRowClick="true"
          Class="table table-hover table-bordered table-striped"
          Style="--bb-table-selected-row-color: whitesmoke;--bb-table-selected-row-background-color: rgb(212, 81, 19);--bb-table-selected-row-hover-color: whitesmoke;--bb-table-selected-row-hover-background-color: rgb(212, 81, 19);"
          DataProvider="DeletedNotesDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="5"
          AllowSorting="true"
          AllowSelection="true"
          @bind-SelectedItems="@selectedNote"
          AutoHidePaging="true"
          OnRowDoubleClick="OnRowDoubleClick"
          Responsive="true"
          Unit="Unit.Px">

        <GridColumns>
            <div class="rowA">
                <GridColumn TItem="DeletedNotesModel" HeaderText="Notes GUID" PropertyName="Notes_GUID" SortKeySelector="item => item.Notes_GUID">
                    @context.Notes_GUID
                </GridColumn>
            </div>
            <GridColumn TItem="DeletedNotesModel" HeaderText="Application Name" PropertyName="Application_Name" SortKeySelector="item => item.Application_Name">
                @context.Application_Name
            </GridColumn>
            <GridColumn TItem="DeletedNotesModel" HeaderText="Release Note" PropertyName="Note_Content" SortKeySelector="item => item.Note_Content">
                @context.Note_Content
            </GridColumn>
            <GridColumn TItem="DeletedNotesModel" HeaderText="Created By" PropertyName="Created_by" SortKeySelector="item => item.Created_by">
                @context.Created_by
            </GridColumn>
            <GridColumn TItem="DeletedNotesModel" HeaderText="Created Date" PropertyName="Created_date" SortKeySelector="item => item.Created_date">
                @context.Created_date.ToString("dd MMM yyyy")
            </GridColumn>
            <GridColumn TItem="DeletedNotesModel" HeaderText="Reason for Deletion" PropertyName="Deletion_reason" SortKeySelector="item => item.Deletion_reason">
                @context.Deletion_reason
            </GridColumn>
            <GridColumn TItem="DeletedNotesModel" HeaderText="Deleted By" PropertyName="Deleted_by" SortKeySelector="item => item.Deleted_by">
                @context.Deleted_by
            </GridColumn>
        </GridColumns>

    </Grid>
</div>
<p>
    <Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/view"> Back to View Release Notes </Button>
    <Button Color="ButtonColor.Secondary" @onclick=Refresh> Refresh </Button>


</p>

<!--Template for the note recovering modal-->
<Modal @ref="viewModal" title="Release Note" IsVerticallyCentered="true" IsScrollable="true" Size="ModalSize.Large">
    <BodyTemplate>

        <p>
            @notes_guid
            <br />
            @application_name
            <br />
            @note_content
            <br />
            @created_by
            <br />
            @created_date
        </p>
      
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideViewModal">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="RecoverNote">Recover Record</Button> 
    </FooterTemplate>
</Modal>



@code {
    int counter = 0;
    bool selected = false;
    [Inject] ModalService ModalService { get; set; } = default!;
    private Modal viewModal = default!;
    private Modal deleteModal = default!;
    //declare a list to store the release notes data
    List<DeletedNotesModel> notes = new();
    //declare the user
    private UserModel currentUser;
    private Grid<DeletedNotesModel> grid;
    private HashSet<DeletedNotesModel> selectedNote = new();
    int numNotes = 0;
    //private String message ="";
    private String notes_guid = "";
    private String application_name = "";
    private String note_content = "";
    private String created_by = "";
    private String created_date = "";
    private String reasonForDeletion = "";
    private String fullName = "";
    private DateTime note_date;

    protected async override Task OnInitializedAsync()
    {
        //Check if user is signed in
        currentUser = _data.GetUserSignOnInfo();
        //if no user is signed in, redirect to sign in page
        if (currentUser == null)
        {
            nav.NavigateTo("/signin");
        }

        //fetch release notes data from the database for the grid and store it in the notes list
        try
        {
            string sql = "select * from DeletedNotes";

            notes = await _notesData.LoadDeletedNotes<DeletedNotesModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            numNotes = notes.Count;
            //var connectionString = _config.GetConnectionString("default");
            //Console.WriteLine($"Connection String: {connectionString}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
    //Data provider for the grid, use the data from the notes list to populate the grid
    private async Task<GridDataProviderResult<DeletedNotesModel>> DeletedNotesDataProvider(GridDataProviderRequest<DeletedNotesModel> request)
    {
        return await Task.FromResult(request.ApplyTo(notes));
    }
    private async Task OnRowDoubleClick(GridRowEventArgs<DeletedNotesModel> args)
    {
        Console.WriteLine($"Item: {args.Item}");
        Console.WriteLine($"Note_Content: {args.Item?.Note_Content}");
        //await ModalService.ShowAsync(new ModalOption { Type = ModalType.Primary, Title = "Release Note", Message = $"{args.Item?.Note_Content}", Scrollable=true });
        //await modal.ShowAsync<EmployeeDemoComponent1>(title: "Release Note", parameters: $"{args.Item?.Note_Content}");
        // selectedNote = $"Note: {args.Item?.Note_Content}";
        notes_guid = $"{args.Item?.Notes_GUID}";
        application_name = $"{args.Item?.Application_Name}";
        note_content = $"{args.Item?.Note_Content}";
        created_by = $"{args.Item?.Created_by}";
        created_date = $"{args.Item?.Created_date}";
        await viewModal.ShowAsync(); // Show modal
    }
    private async Task HideViewModal()
    {
        await viewModal.HideAsync();
    }
    private async Task RecoverNote()
    {
        try //maybe get rid of this, we have too many try-catches
        {

            try //first insert the DeletedNote into the ReleaseNotes table
            {
                string insertSql = "insert into ReleaseNotes (Notes_GUID, Application_Name, Note_Content, Created_by, Created_date) values (@Notes_GUID, @Application_Name, @Note_Content, @Created_by, @note_date);";

                //close the modal
                await HideViewModal();

                //structure the task call to insert the new note into the database, I made it vertical for readability
                await _notesData.ExecuteSql(insertSql, new
                {
                    notes_guid,
                    application_name,
                    note_content,
                    created_by,
                    note_date = DateTime.Parse(created_date),
                
                }, _config.GetConnectionString("default"));
               
                

            }
            catch (Exception e)
            {//if there is an error, display whether or not the note was saved
                Console.WriteLine(e.Message);
            }



            try //then delete
            {
                //sql query to delete the selected note from the ReleaseNotes table in the database
                string deleteSql = "delete from DeletedNotes where Notes_GUID = @notes_guid;";
                await _notesData.ExecuteSql(deleteSql, new
                {
                    notes_guid

                }, _config.GetConnectionString("default"));
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            //refresh the page to reflect changes
            nav.NavigateTo("/deletedrecords", forceLoad: true);

            // is the line below problematic?
            await OnInitializedAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine("e.Message");
        }

    }

    public void Refresh()
    {

        nav.NavigateTo("/deletedrecords", forceLoad: true);
    }


}
