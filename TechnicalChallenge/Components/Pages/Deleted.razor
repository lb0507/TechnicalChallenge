@*

    The page to view the deleted release notes in the database (the DeletedNotes table).
    Version 3.30.25

*@

<!-- Link to the page -->
@page "/deletedrecords"
@rendermode InteractiveServer
@layout EmptyLayout
@using DataLibrary
@using DataLibrary.Models
@using Microsoft.Extensions.Configuration
@using BlazorBootstrap.Components



<!-- Injections -->
@inject IUserData _data
@inject IReleaseNotesData _notesData
@inject IConfiguration _config
@inject NavigationManager nav



<PageTitle>View Records</PageTitle>
<Modal IsServiceModal="true" />
<body>
    <div class="top-row px-4">
        <!--This page is not using the MainLayout, so we have to add the sign-out/dashboard navigation bar to to the top of the page-->
        <a><SignOutButton /></a>

    </div>
    <main>
        <h3>Release Notes Management Tool</h3>
        <p>Deleted Release Note Records:</p>
        <p>@numNotes Record(s) Found</p>
    
        <div class="grid-content">
            <!-- Build the table for displaying release note data as a grid-->
            <Grid @ref="grid"
                  TItem="DeletedNotesModel"
                  AllowRowClick="true"
                  Class="table table-hover table-bordered table-striped"
                  Style="background-color: rgb(158, 179, 194);"
                  DataProvider="DeletedNotesDataProvider"
                  AllowFiltering="true"
                  AllowPaging="true"
                  PageSize="5"
                  AllowSorting="true"
                  AutoHidePaging="true"
                  OnRowDoubleClick="OnRowDoubleClick"
                  Responsive="true"
                  Unit="Unit.Px">

                <GridColumns>
                    <div class="rowA">
                        <GridColumn TItem="DeletedNotesModel" HeaderText="Notes GUID" PropertyName="Notes_GUID" SortKeySelector="item => item.Notes_GUID">
                            @context.Notes_GUID
                        </GridColumn>
                    </div>
                    <GridColumn TItem="DeletedNotesModel" HeaderText="Application Name" PropertyName="Application_Name" SortKeySelector="item => item.Application_Name">
                        @context.Application_Name
                    </GridColumn>
                    <GridColumn TItem="DeletedNotesModel" HeaderText="Release Note" PropertyName="Note_Content" SortKeySelector="item => item.Note_Content">
                        @context.Note_Content
                    </GridColumn>
                    <GridColumn TItem="DeletedNotesModel" HeaderText="Created By" PropertyName="Created_by" SortKeySelector="item => item.Created_by">
                        @context.Created_by
                    </GridColumn>
                    <GridColumn TItem="DeletedNotesModel" HeaderText="Created Date" PropertyName="Created_date" SortKeySelector="item => item.Created_date">
                        @context.Created_date.ToString("dd MMM yyyy")
                    </GridColumn>
                    <GridColumn TItem="DeletedNotesModel" HeaderText="Reason for Deletion" PropertyName="Deletion_reason" SortKeySelector="item => item.Deletion_reason">
                        @context.Deletion_reason
                    </GridColumn>
                    <GridColumn TItem="DeletedNotesModel" HeaderText="Deleted By" PropertyName="Deleted_by" SortKeySelector="item => item.Deleted_by">
                        @context.Deleted_by
                    </GridColumn>
                </GridColumns>

            </Grid>
        </div>
        <p>
            <!--Button to navigate to the view records page-->
            <Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/view"> Back to View Release Notes </Button>
            <!--Button to refresh the page-->
            <Button Color="ButtonColor.Secondary" @onclick=Refresh> Refresh </Button>


        </p>
    </main>
</body>
<!--Template for the note recovering records modal-->
<Modal @ref="modal" title="Release Note" IsVerticallyCentered="true" IsScrollable="true" Size="ModalSize.Large">
    <BodyTemplate>

        <p class="modal-text">
            @notes_guid
            <br />
            @application_name
            <br />
            @note_content
            <br />
            @created_by
            <br />
            @created_date
        </p>
      
    </BodyTemplate>
    <FooterTemplate>
        <!--Button to close the modal-->
        <Button Color="ButtonColor.Secondary" @onclick="HideModal">Close</Button>
        <!--Button to recover the selected record-->
        <Button Color="ButtonColor.Primary" @onclick="RecoverNote">Recover Record</Button> 
    </FooterTemplate>
</Modal>



@code {
    //inject the modal service
    [Inject] ModalService ModalService { get; set; } = default!;

    //reference to the modal
    private Modal modal = default!;

    //declare a list to store the release notes data for the grid
    List<DeletedNotesModel> notes = new();

    //declare the user
    private UserModel currentUser;

    //declare the grid
    private Grid<DeletedNotesModel> grid;
    
    int numNotes = 0;
    //declare variables to store the values of the selected note
    private String notes_guid = "";
    private String application_name = "";
    private String note_content = "";
    private String created_by = "";
    private String created_date = "";
    private String reasonForDeletion = "";
    private String fullName = "";
    private DateTime note_date;

    protected async override Task OnInitializedAsync()
    {
        //Check if user is signed in
        currentUser = _data.GetUserSignOnInfo();
        //if no user is signed in, redirect to sign in page
        if (currentUser == null)
        {
            nav.NavigateTo("/signin");
        }

        //fetch deleted release notes data from the database for the grid and store it in the notes list
        try
        {
            string sql = "select * from DeletedNotes";
            //call the LoadDeletedNotes function from the ReleaseNotesData.cs file to return a list of the deleted release notes
            notes = await _notesData.LoadDeletedNotes<DeletedNotesModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            //store the number of rows in the DeletedNotes table
            numNotes = notes.Count;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
    //Data provider for the grid, use the data from the notes list to populate the grid
    private async Task<GridDataProviderResult<DeletedNotesModel>> DeletedNotesDataProvider(GridDataProviderRequest<DeletedNotesModel> request)
    {
        return await Task.FromResult(request.ApplyTo(notes));
    }
    private async Task OnRowDoubleClick(GridRowEventArgs<DeletedNotesModel> args)
    {//upon double clicking a row in the grid, display the modal with the release note data of the selected row
        //each value is pulled from the grid and stored in a variable to be displayed in the modal
        notes_guid = $"{args.Item?.Notes_GUID}";
        application_name = $"{args.Item?.Application_Name}";
        note_content = $"{args.Item?.Note_Content}";
        created_by = $"{args.Item?.Created_by}";
        created_date = $"{args.Item?.Created_date}";
        await modal.ShowAsync(); // Show modal
    }

    //hide the modal
    private async Task HideModal()
    {
        await modal.HideAsync();
    }

    //function to insert the selected note into the ReleaseNotes table and delete it from the DeletedNotes table
    private async Task RecoverNote()
    {
        try //first insert the DeletedNote into the ReleaseNotes table
        {
            string insertSql = "insert into ReleaseNotes (Notes_GUID, Application_Name, Note_Content, Created_by, Created_date) values (@Notes_GUID, @Application_Name, @Note_Content, @Created_by, @note_date);";

            //close the modal
            await HideModal();

            //set the parameters and call the task to insert the selected note into the ReleaseNotes table, I made it vertical for readability
            await _notesData.ExecuteSql(insertSql, new
            {
                notes_guid,
                application_name,
                note_content,
                created_by,
                note_date = DateTime.Parse(created_date), //convert the created_date string back to a DateTime object
                
            }, _config.GetConnectionString("default"));
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        try //now delete the note from the DeletedNotes table
        {
            //sql query to delete the selected note from the DeletedNotes table in the database
            string deleteSql = "delete from DeletedNotes where Notes_GUID = @notes_guid;";
            //execute the query
            await _notesData.ExecuteSql(deleteSql, new
            {
                notes_guid

            }, _config.GetConnectionString("default"));
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        //refresh the page to reflect changes
        nav.NavigateTo("/deletedrecords", forceLoad: true);
    }

    public void Refresh()
    {//function that refreshes the page by navigating to the same page and forcing a reload
        nav.NavigateTo("/deletedrecords", forceLoad: true);
    }
}
